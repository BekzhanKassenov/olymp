/* DO NOT EDIT THIS FILE - it is machine generated */

import sun.misc.Unsafe;

public class WorldData extends Constants {
    static final int addr = Adapter.worldAddr;

    private static final int currentTimeOffset = 0;
    private static final int currentTimeSize = intSize;

    public static int currentTime () {
        return unsafe.getInt(addr + currentTimeOffset);
    }

    private static final int maximalMatchTimeOffset = currentTimeOffset + currentTimeSize;
    private static final int maximalMatchTimeSize = intSize;

    public static int maximalMatchTime () {
        return unsafe.getInt(addr + maximalMatchTimeOffset);
    }

    private static final int factoryClassesOffset = maximalMatchTimeOffset + maximalMatchTimeSize;

    public static int factoryClass (int index) {
        if (index < 0 || index >= FACTORY_CLASS_COUNT) throw new IllegalArgumentException();
        return addr + factoryClassesOffset + FactoryClass.size * index;
    }

    private static final int factoryClassesSize = FactoryClass.size * FACTORY_CLASS_COUNT;
    private static final int robotClassesOffset = factoryClassesOffset + factoryClassesSize;

    public static int robotClass (int index) {
        if (index < 0 || index >= ROBOT_CLASS_COUNT) throw new IllegalArgumentException();
        return addr + robotClassesOffset + RobotClass.size * index;
    }

    private static final int robotClassesSize = RobotClass.size * ROBOT_CLASS_COUNT;
    private static final int projectileClassesOffset = robotClassesOffset + robotClassesSize;

    public static int projectileClass (int index) {
        if (index < 0 || index >= PROJECTILE_CLASS_COUNT) throw new IllegalArgumentException();
        return addr + projectileClassesOffset + ProjectileClass.size * index;
    }

    private static final int projectileClassesSize = ProjectileClass.size * PROJECTILE_CLASS_COUNT;
    private static final int factoriesOffset = projectileClassesOffset + projectileClassesSize;

    public static int factory (int index) {
        if (index < 0 || index >= MAX_FACTORY_COUNT) throw new IllegalArgumentException();
        return addr + factoriesOffset + Factory.size * index;
    }

    private static final int factoriesSize = Factory.size * MAX_FACTORY_COUNT;
    private static final int robotsOffset = factoriesOffset + factoriesSize;

    public static int robot (int index) {
        if (index < 0 || index >= MAX_ROBOT_COUNT) throw new IllegalArgumentException();
        return addr + robotsOffset + Robot.size * index;
    }

    private static final int robotsSize = Robot.size * MAX_ROBOT_COUNT;
    private static final int projectilesOffset = robotsOffset + robotsSize;

    public static int projectile (int index) {
        if (index < 0 || index >= MAX_PROJECTILE_COUNT) throw new IllegalArgumentException();
        return addr + projectilesOffset + Projectile.size * index;
    }

    private static final int projectilesSize = Projectile.size * MAX_PROJECTILE_COUNT;

    static final int size = projectilesOffset + projectilesSize;
}

